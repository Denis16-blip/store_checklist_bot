import os
import asyncio
import threading
from datetime import datetime

from flask import Flask, request, jsonify, Response
from dotenv import load_dotenv

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputMediaPhoto,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ENV & Flask
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("TELEGRAM_ADMIN_ID", "0"))
BASE_URL = os.getenv("BASE_URL", "").rstrip("/")

app = Flask(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# PTB application (background thread loop)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
PTB_APP: Application | None = None
PTB_THREAD: threading.Thread | None = None
PTB_READY = False


def build_application() -> Application:
    if not BOT_TOKEN:
        raise RuntimeError("BOT_TOKEN env is empty.")
    return (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .concurrent_updates(True)
        .build()
    )


async def init_handlers(application: Application) -> None:
    # ‚Üì‚Üì‚Üì Register handlers
    application.add_handler(CommandHandler("start", h_start))
    application.add_handler(CommandHandler("cancel", h_cancel))
    application.add_handler(CallbackQueryHandler(h_buttons))
    # –ø—Ä–∏–µ–º —Ñ–æ—Ç–æ/—Ç–µ–∫—Å—Ç–∞ –í–û –í–†–ï–ú–Ø —á–µ–∫-–ª–∏—Å—Ç–∞
    application.add_handler(MessageHandler(filters.PHOTO, h_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, h_text))


def ptb_worker():
    global PTB_APP, PTB_READY
    async def runner():
        global PTB_READY
        PTB_APP = build_application()
        await init_handlers(PTB_APP)

        # webhook (Render)
        if BASE_URL:
            await PTB_APP.bot.set_webhook(url=f"{BASE_URL}/")
        PTB_READY = True
        await PTB_APP.initialize()
        await PTB_APP.start()
        # WebhookUpdateProcessor is implicit in webhook mode ‚Äì we just keep loop alive
        while True:
            await asyncio.sleep(3600)

    try:
        asyncio.run(runner())
    except Exception as e:
        PTB_READY = False
        print(f"[PTB ERROR] {e}")


def ensure_thread_started():
    global PTB_THREAD
    if PTB_THREAD and PTB_THREAD.is_alive():
        return
    PTB_THREAD = threading.Thread(target=ptb_worker, daemon=True)
    PTB_THREAD.start()


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Checklist data & simple in-memory state
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô —á–µ–∫-–ª–∏—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¢–ó –∫ –ø—Ä–æ–¥–∞–∂–∞–º (–ø–æ PPTX)
CHECKLIST = [
    # 1. –û–±—â–µ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞
    "1.1 –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã—Å—Ç—Ä–æ–µ–Ω—ã –ø–æ —É—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–º—É –∑–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –º–∞–≥–∞–∑–∏–Ω–∞",
    "1.1 –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø–æ –±—Ä–µ–Ω–¥–∞–º –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º",
    "1.1 –ó–æ–Ω—ã –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ (–±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –±—Ä–µ–Ω–¥–æ–≤)",
    "1.2 –ü–ª–∞–Ω–æ–≥—Ä–∞–º–º—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—é",
    "1.2 –ë–∞–ª–∞–Ω—Å ¬´–≤–µ—Ä—Ö–æ–≤/–Ω–∏–∑–æ–≤¬ª —Å–æ–±–ª—é–¥—ë–Ω; —Ä–∞–∑–≤–µ—Å–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≤–µ—Ä—Ö–æ–≤, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç—å",
    "1.2 –ü—Ä–∏ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–∏ —Ç–∏–ø–æ–≤ –∏–∑–¥–µ–ª–∏–π (–¥–ª–∏–Ω–Ω—ã–π —Ä—É–∫–∞–≤/–Ω–∏–∑—ã/–∫–æ—Ä–æ—Ç–∫–∏–π —Ä—É–∫–∞–≤) —Å–æ–±–ª—é–¥–µ–Ω–∞ –ª–æ–≥–∏–∫–∞",
    "1.3 POSM —Ä–∞–∑–º–µ—â–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: —Ö–µ–¥–µ—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ª–æ–≥–æ—Ç–∏–ø—ã –±—Ä–µ–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã",
    "1.3 –ì—Ä–∞—Ñ–∏–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–π –∫–∞–º–ø–∞–Ω–∏–∏",
    "1.3 –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π POSM –≤ –∑–∞—è–≤–∫–µ –Ω–∞ –∑–∞–∫–∞–∑/–∑–∞–º–µ–Ω—É; —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ/–ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–æ",

    # 2. –ö—Ä–æ—Å—Å-–º–µ—Ä—á–∞–Ω–¥–∞–π–∑–∏–Ω–≥ –∏ —Å—Ç–∞–π–ª–∏–Ω–≥
    "2.1 –ö—Ä–æ—Å—Å-–º–µ—Ä—á (–æ–±—É–≤—å/—Å—É–º–∫–∏/—Ä—é–∫–∑–∞–∫–∏/—à–∞–ø–∫–∏/–∫–µ–ø–∫–∏/—Ñ–∏—Ç–Ω–µ—Å-–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã) —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±—Ä–µ–Ω–¥—É, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ü–≤–µ—Ç—É",
    "2.1 –ö—Ä–æ—Å—Å-–º–µ—Ä—á –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–µ–Ω—É/–≥–æ–Ω–¥–æ–ª—É",
    "2.1 –¢–æ—Ä—Ü—ã –≥–æ–Ω–¥–æ–ª –ø–æ –ø–æ—Ç–æ–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å–µ–∑–æ–Ω–Ω—ã–º–∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–º–∏ –ø–æ–¥ —Ç–µ–º–∞—Ç–∏–∫—É –∑–æ–Ω—ã",
    "2.1 –í —Å–ø–æ—Ä—Ç-–∑–æ–Ω–µ ‚Äî —Ñ–∏—Ç–Ω–µ—Å-–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã; –≤ —Ñ—É—Ç–±–æ–ª–µ ‚Äî —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ; –≤ –ª–∞–π—Ñ—Å—Ç–∞–π–ª–µ ‚Äî –Ω–æ—Å–∫–∏/—Ä—é–∫–∑–∞–∫–∏ –∏ —Ç. –ø.",
    "2.2 –ö–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π —Ñ—Ä–æ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∞–Ω —Å—Ç–∞–π–ª–∏–Ω–≥–æ–º –∏–ª–∏ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º",
    "2.2 –Ø—Ä–ª—ã–∫–∏ —Å–ø—Ä—è—Ç–∞–Ω—ã, –∫—Ä—é—á–∫–∏ –ø–æ –ø—Ä–∞–≤–∏–ª—É ¬´–ø—Ä–∞–≤–æ–π —Ä—É–∫–∏¬ª",
    "2.2 –í–∏—Ç—Ä–∏–Ω—ã –∏ –∑–∞–ª –≤–∏–∑—É–∞–ª—å–Ω–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤—ã—Å–æ—Ç–µ, —Ü–≤–µ—Ç—É –∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏",

    # 3. –ù–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    "3.1 –¢–µ–∫—Å—Ç–∏–ª—å: —Ä–∞–∑–º–µ—â—ë–Ω –æ—Ç –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫ –±–æ–ª—å—à–µ–º—É",
    "3.1 –ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: —Ç–µ–∫—Å—Ç–∏–ª—å ‚Äî 6 –µ–¥/–∞—Ä—Ç–∏–∫—É–ª; –≤–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞ ‚Äî 4 –µ–¥ (KM7: —Ç–µ–∫—Å—Ç–∏–ª—å 4, –∫—É—Ä—Ç–∫–∏ 2)",
    "3.1 –õ–∏—à–Ω–∏–µ –∑–∞–ø–∞—Å—ã –Ω–µ –≤—ã–Ω–µ—Å–µ–Ω—ã –≤ –∑–∞–ª",
    "3.2 –û–±—É–≤—å: —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ ‚Äî –æ—Ç –±–æ–ª—å—à–µ–π —Ü–µ–Ω—ã –∫ –º–µ–Ω—å—à–µ–π; –±—Ä–µ–Ω–¥—ã —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø–æ VM-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º",
    "3.2 –ü—Ä–æ—Ç–æ–∫–æ–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏: –∂–µ–Ω—Å–∫–∏–µ 5‚Äì6 UK; –º—É–∂—Å–∫–∏–µ 8‚Äì9 UK",
    "3.2 –ü–∞—Ä—ã —á–∏—Å—Ç—ã–µ, —à–Ω—É—Ä–∫–∏ –∑–∞–ø—Ä–∞–≤–ª–µ–Ω—ã, —Ü–µ–Ω–Ω–∏–∫–∏ –≤—ã—Ä–æ–≤–Ω–µ–Ω—ã",

    # 4. –ú–∞–Ω–µ–∫–µ–Ω—ã
    "4.1 –õ—É–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–æ–≥–æ–¥–µ/—Å–µ–∑–æ–Ω—É —Ä–µ–≥–∏–æ–Ω–∞, –µ—Å—Ç—å –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ—Å—Ç—å –∏ —Ü–≤–µ—Ç–æ–≤—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã",
    "4.1 –û–±—É–≤—å —Å–µ–∑–æ–Ω–Ω–∞—è, –≤—ã–¥–µ–ª–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã",
    "4.2 –ú–∞–Ω–µ–∫–µ–Ω—ã –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –∑–∞ —Å–≤–æ–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π (shop-in-shop)",
    "4.2 –í—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –º–∞–Ω–µ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∑–∞–ª–µ –ø–æ–ª–Ω–æ–π —Ä–∞–∑–º–µ—Ä–Ω–æ–π –≥–æ—Ä–∫–æ–π",
    "4.2 –í –æ–±—Ä–∞–∑–∞—Ö –µ—Å—Ç—å –±–µ—Å—Ç—Å–µ–ª–ª–µ—Ä—ã –º–∞–≥–∞–∑–∏–Ω–∞/—Ä–µ–≥–∏–æ–Ω–∞; –æ–±—Ä–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω (–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã/–∫—Ä–æ—Å—Å-–º–µ—Ä—á/—Ü–≤–µ—Ç)",

    # 5. –í–∏—Ç—Ä–∏–Ω–∞
    "5.1 –ö–æ–Ω—Ü–µ–ø—Ç –≤–∏—Ç—Ä–∏–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –±—Ä–µ–Ω–¥–∞",
    "5.1 –í–∏—Ç—Ä–∏–Ω–∞ –∏ —Å—Ç–µ–∫–ª–æ —á–∏—Å—Ç—ã–µ; –¥–µ–∫–æ—Ä –±–µ–∑ –ø—ã–ª–∏",
    "5.1 POSM —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º",
    "5.3 –û—Å–≤–µ—â–µ–Ω–∏–µ –≤–∏—Ç—Ä–∏–Ω—ã –∞–∫—Ü–µ–Ω—Ç–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫—É/–∏–Ω—Å—Ç–∞–ª–ª—è—Ü–∏–∏, –Ω–µ—Ç –ø–µ—Ä–µ—Å–≤–µ—Ç–æ–≤ –∏ –±–ª–∏–∫–æ–≤",
    "5.3 –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Å–≤–µ—Ç–∞ ‚Äî –∑–∞—è–≤–∫–∞ –≤ Jira",

    # 6. –ß–∏—Å—Ç–∞—è –∫–∞—Å—Å–æ–≤–∞—è –∑–æ–Ω–∞
    "6.1 –ù–∞ –∫–∞—Å—Å–æ–≤–æ–º —Å—Ç–æ–ª–µ/–≤ —à–∫–∞—Ñ—É —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ª–∏—Å—Ç–æ–≤–∫–∏ –∏ POS-–º–∞—Ç–µ—Ä–∏–∞–ª—ã",
    "6.1 –ò–∑ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∫–∞—Å—Å–µ ‚Äî —Ç–æ–ª—å–∫–æ –±—Ä–µ–Ω–¥ SOLMATE; –±–µ–∑ —Ü–µ–Ω–Ω–∏–∫–æ–≤ –Ω–∞ –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ",
    "6.2 –ê–∫—Å–µ—Å—Å—É–∞—Ä–Ω–∞—è –∑–æ–Ω–∞ —É –∫–∞—Å—Å—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∑–æ–Ω—É –∏ —Å–ø—Ä–æ—Å—É",
    "6.2 –†—é–∫–∑–∞–∫–∏ –∏ —Å—É–º–∫–∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –Ω–∞–±–∏—Ç—ã –±—É–º–∞–≥–æ–π/–Ω–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º",

    # 7. –û—Å–≤–µ—â–µ–Ω–∏–µ –∑–∞–ª–∞
    "7.1 –í—Å–µ –ª–∞–º–ø—ã –∏—Å–ø—Ä–∞–≤–Ω—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Ü–µ–ª–µ–Ω—ã",
    "7.1 –§–æ–∫—É—Å–Ω—ã–µ —Ç–æ—á–∫–∏: –≤—Ö–æ–¥–Ω–∞—è —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è, —Ñ—Ä–æ–Ω—Ç—ã, –æ—Å—Ç—Ä–æ–≤–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –∫–ª—é—á–µ–≤—ã–µ POSM, –º–∞–Ω–µ–∫–µ–Ω—ã",
    "7.1 –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è ‚Äî 1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é; –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Ü–µ–ª–∏–≤–∞–Ω–∏—è ‚Äî –∑–∞—è–≤–∫–∞ –≤ Jira",
]

# user_id -> session dict
SESSIONS: dict[int, dict] = {}


def kb_for_question():
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚úÖ –û–∫", callback_data="ans:ok"),
             InlineKeyboardButton("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞", callback_data="ans:issue")],
            [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="ans:skip"),
             InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="ans:finish")],
        ]
    )


def kb_next():
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="nav:next")],
         [InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="ans:finish")]]
    )


def session_get(uid: int) -> dict:
    s = SESSIONS.get(uid)
    if not s:
        s = {
            "idx": 0,                # current question index
            "answers": [],           # list of dicts: {q, status, comment, photos}
            "collect_mode": False,   # True –µ—Å–ª–∏ –∂–¥—ë–º —Ñ–æ—Ç–æ/–∫–æ–º–º–µ–Ω—Ç –¥–ª—è "–ü—Ä–æ–±–ª–µ–º–∞"
        }
        SESSIONS[uid] = s
    return s


def reset_session(uid: int):
    if uid in SESSIONS:
        del SESSIONS[uid]


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Handlers
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

async def h_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ensure_thread_started()
    uid = update.effective_user.id
    reset_session(uid)

    kb = InlineKeyboardMarkup(
        [[InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç", callback_data="start")]]
    )
    await update.effective_message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –Ω–∞ –≤–µ–±—Ö—É–∫–µ.\n–≠—Ç–æ *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¢–ó –∫ –ø—Ä–æ–¥–∞–∂–∞–º*.\n–ù–∞–∂–º–∏ ¬´–ù–∞—á–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç¬ª.",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=kb,
    )


async def h_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    reset_session(uid)
    await update.effective_message.reply_text("–û–∫–µ–π, —á–µ–∫-–ª–∏—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω.")


async def send_question(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    s = session_get(chat_id)
    idx = s["idx"]

    # –µ—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã ‚Äî —Ñ–∏–Ω–∞–ª
    if idx >= len(CHECKLIST):
        await finish_and_send(chat_id, context)
        return

    q = CHECKLIST[idx]
    await context.bot.send_message(
        chat_id=chat_id,
        text=f"*–ü—É–Ω–∫—Ç {idx+1}/{len(CHECKLIST)}:*\n{q}",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=kb_for_question(),
    )


async def h_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.callback_query:
        return
    q = update.callback_query
    await q.answer()

    uid = q.from_user.id
    s = session_get(uid)
    data = q.data

    if data == "start":
        # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        s["idx"] = 0
        s["answers"] = []
        s["collect_mode"] = False
        await q.message.edit_text("–ü–æ–µ—Ö–∞–ª–∏. –û—Ç–≤–µ—á–∞–π –ø–æ –ø—É–Ω–∫—Ç–∞–º —á–µ–∫-–ª–∏—Å—Ç–∞ üëá")
        await send_question(uid, context)
        return

    if data.startswith("ans:"):
        action = data.split(":", 1)[1]
        if action == "finish":
            await q.message.edit_reply_markup(None)
            await finish_and_send(uid, context)
            return

        idx = s["idx"]
        # —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
        while len(s["answers"]) <= idx:
            s["answers"].append({"q": CHECKLIST[idx], "status": None, "comment": "", "photos": []})

        rec = s["answers"][idx]

        if action == "ok":
            rec["status"] = "OK"
            s["collect_mode"] = False
            s["idx"] += 1
            await q.message.edit_text(f"‚úÖ –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ: *–û–ö*.\n", parse_mode=ParseMode.MARKDOWN)
            await send_question(uid, context)
            return

        if action == "skip":
            rec["status"] = "SKIP"
            s["collect_mode"] = False
            s["idx"] += 1
            await q.message.edit_text(f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ.\n")
            await send_question(uid, context)
            return

        if action == "issue":
            rec["status"] = "ISSUE"
            s["collect_mode"] = True
            await q.message.edit_text(
                "‚ö†Ô∏è –ü–æ–º–µ—Ç–∏–ª –∫–∞–∫ *–ü—Ä–æ–±–ª–µ–º–∞*.\n"
                "–ü—Ä–∏—à–ª–∏ *—Ñ–æ—Ç–æ* –∏/–∏–ª–∏ *–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π*.\n"
                "–ì–æ—Ç–æ–≤–æ ‚Äî –∂–º–∏ ¬´–î–∞–ª—å—à–µ¬ª.",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=kb_next(),
            )
            return

    if data == "nav:next":
        # –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Å–±–æ—Ä–∞ –¥–æ–∫-–≤ –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ
        s["collect_mode"] = False
        s["idx"] += 1
        await q.message.edit_text("–ü—Ä–∏–Ω—è—Ç–æ. –ò–¥—ë–º –¥–∞–ª—å—à–µ ‚û°Ô∏è")
        await send_question(uid, context)
        return


async def h_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    s = session_get(uid)

    # –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —á–µ–∫-–ª–∏—Å—Ç–∞
    if s.get("idx", 0) >= len(CHECKLIST):
        return

    # —Å–æ–∑–¥–∞—ë–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    idx = s["idx"]
    while len(s["answers"]) <= idx:
        s["answers"].append({"q": CHECKLIST[idx], "status": None, "comment": "", "photos": []})
    rec = s["answers"][idx]

    file_id = update.effective_message.photo[-1].file_id
    rec["photos"].append(file_id)

    # –µ—Å–ª–∏ –µ—â—ë –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å, —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ ISSUE
    if not rec["status"]:
        rec["status"] = "ISSUE"
        s["collect_mode"] = True

    await update.effective_message.reply_text("üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ñ–º–∏ ¬´–î–∞–ª—å—à–µ¬ª –∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤.", reply_markup=kb_next())


async def h_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    s = session_get(uid)
    if s.get("idx", 0) >= len(CHECKLIST):
        return

    idx = s["idx"]
    while len(s["answers"]) <= idx:
        s["answers"].append({"q": CHECKLIST[idx], "status": None, "comment": "", "photos": []})
    rec = s["answers"][idx]

    # —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç = –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç–µ–∫—É—â–µ–º—É –ø—É–Ω–∫—Ç—É
    comment = (rec.get("comment") or "").strip()
    if comment:
        comment += " | "
    rec["comment"] = comment + update.effective_message.text.strip()

    # –µ—Å–ª–∏ –µ—â—ë –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å ‚Äî —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ ISSUE
    if not rec["status"]:
        rec["status"] = "ISSUE"
        s["collect_mode"] = True

    await update.effective_message.reply_text("‚úçÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω. –ñ–º–∏ ¬´–î–∞–ª—å—à–µ¬ª –∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤.", reply_markup=kb_next())


def render_summary(user_name: str, s: dict) -> str:
    lines = [
        f"*–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¢–ó –∫ –ø—Ä–æ–¥–∞–∂–∞–º*",
        f"_–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:_ {user_name}",
        f"_–î–∞—Ç–∞:_ {datetime.now().strftime('%Y-%m-%d %H:%M')}",
        "",
    ]
    ok, issues, skipped = 0, 0, 0
    for i, rec in enumerate(s["answers"]):
        st = rec.get("status") or "‚Äî"
        if st == "OK":
            ok += 1
            emoji = "‚úÖ"
        elif st == "ISSUE":
            issues += 1
            emoji = "‚ö†Ô∏è"
        elif st == "SKIP":
            skipped += 1
            emoji = "‚è≠"
        else:
            emoji = "‚Ä¢"

        cmnt = f"\n    _–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:_ {rec['comment']}" if rec.get("comment") else ""
        ph = f"\n    _–§–æ—Ç–æ:_ {len(rec['photos'])} —à—Ç." if rec.get("photos") else ""
        lines.append(f"*{i+1}. {emoji}* {rec['q']}{cmnt}{ph}")

    lines.append("")
    lines.append(f"*–ò—Ç–æ–≥–∏:* ‚úÖ {ok}  ‚ö†Ô∏è {issues}  ‚è≠ {skipped}")
    return "\n".join(lines)


async def finish_and_send(uid: int, context: ContextTypes.DEFAULT_TYPE):
    s = session_get(uid)
    user = await context.bot.get_chat(uid)
    summary = render_summary(user_name=user.full_name, s=s)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await context.bot.send_message(uid, summary, parse_mode=ParseMode.MARKDOWN)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
    targets = [uid]
    if ADMIN_ID and ADMIN_ID != uid:
        targets.append(ADMIN_ID)

    # —Ñ–æ—Ç–æ —Å–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞–ª—å–±–æ–º–∞–º –Ω–∞ –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç, –≥–¥–µ –æ–Ω–∏ –µ—Å—Ç—å
    for tgt in targets:
        for i, rec in enumerate(s["answers"]):
            photos = rec.get("photos") or []
            if not photos:
                continue
            # –ù–µ –±–æ–ª—å—à–µ 10 –≤ –æ–¥–Ω–æ–º media_group ‚Äî Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            chunk = []
            for fid in photos:
                chunk.append(InputMediaPhoto(media=fid, caption=f"–ü—É–Ω–∫—Ç {i+1}: {rec['q']}" if not chunk else None))
                if len(chunk) == 10:
                    await context.bot.send_media_group(tgt, media=chunk)
                    chunk = []
            if chunk:
                await context.bot.send_media_group(tgt, media=chunk)

    await context.bot.send_message(uid, "–ì–æ—Ç–æ–≤–æ! –°–ø–∞—Å–∏–±–æ üôå")
    if ADMIN_ID and ADMIN_ID != uid:
        await context.bot.send_message(ADMIN_ID, f"–û—Ç—á—ë—Ç –æ—Ç {user.full_name} –ø–æ–ª—É—á–µ–Ω ‚úÖ")

    # –æ—á–∏—Å—Ç–∏–º —Å–µ—Å—Å–∏—é
    reset_session(uid)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Webhook endpoint for Telegram + service endpoints
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@app.post("/")
def telegram_webhook():
    if not PTB_READY or PTB_APP is None:
        # Telegram —Å–∞–º —Ä–µ—Ç—Ä–∞–∏—Ç, –µ—Å–ª–∏ 503
        print(">>> webhook: loop not ready (503) ‚Äî Telegram will retry")
        return Response("loop not ready", status=503)

    try:
        update = Update.de_json(request.get_json(force=True, silent=True), PTB_APP.bot)
    except Exception:
        return Response("bad request", status=400)

    PTB_APP.update_queue.put_nowait(update)
    return Response("ok", status=200)


@app.get("/health")
def health():
    return Response("ok", status=200)


@app.get("/_loop")
def loop_info():
    alive = PTB_THREAD.is_alive() if PTB_THREAD else False
    return f"loop_alive={alive}, is_running={PTB_READY}"


@app.get("/diag")
async def diag():
    info = {
        "ptb_ready": PTB_READY,
        "thread_alive": PTB_THREAD.is_alive() if PTB_THREAD else False,
        "base_url": BASE_URL,
    }
    return jsonify(info)


@app.get("/getwebhookinfo_raw")
def getwebhookinfo_raw():
    if PTB_APP is None:
        return Response("no app", status=503)
    data = asyncio.run(PTB_APP.bot.get_webhook_info())
    return jsonify(data.to_dict())


@app.get("/getwebhookinfo")
def getwebhookinfo():
    if PTB_APP is None:
        return Response("no app", status=503)
    info = asyncio.run(PTB_APP.bot.get_webhook_info())
    return jsonify({
        "url": info.url,
        "has_custom_certificate": info.has_custom_certificate,
        "pending_update_count": info.pending_update_count,
        "last_error_date": info.last_error_date,
        "last_error_message": info.last_error_message,
        "max_connections": info.max_connections,
        "ip_address": info.ip_address,
        "allowed_updates": info.allowed_updates,
    })


@app.get("/set-webhook")
def set_webhook():
    if PTB_APP is None:
        ensure_thread_started()
        return Response("PTB starting, try again in a few seconds", status=202)
    asyncio.run(PTB_APP.bot.set_webhook(url=f"{BASE_URL}/"))
    return Response(f"Webhook set to {BASE_URL}/", status=200)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

if __name__ == "__main__":
    ensure_thread_started()
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", "5000")))

