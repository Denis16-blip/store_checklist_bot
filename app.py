import os
import asyncio
import threading
from typing import Optional

from flask import Flask, request
from dotenv import load_dotenv
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardRemove, InputMediaPhoto,
)
from telegram.ext import (
    Application, CallbackContext, CommandHandler,
    CallbackQueryHandler, MessageHandler, filters,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ENV
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("TELEGRAM_ADMIN_ID", "0"))
BASE_URL = os.getenv("BASE_URL", "")  # –¥–ª—è /set-webhook

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ß–ï–ö-–õ–ò–°–¢ (–º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å)
CHECKLIST_BLOCKS = [
    {"code": "assortment","title":"1) –û–±—â–µ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞","items":[
        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã—Å—Ç—Ä–æ–µ–Ω—ã –ø–æ –∑–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é",
        "–ö–æ–ª–ª–µ–∫—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø–æ –±—Ä–µ–Ω–¥–∞–º/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º",
        "–ü–µ—Ä–µ—Ö–æ–¥–Ω—ã–µ –∑–æ–Ω—ã –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã, –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –±—Ä–µ–Ω–¥–æ–≤",
    ]},
    {"code": "planograms","title":"2) –ü–ª–∞–Ω–æ–≥—Ä–∞–º–º—ã –∏ –±–∞–ª–∞–Ω—Å","items":[
        "–ü–ª–∞–Ω–æ–≥—Ä–∞–º–º—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—é",
        "–ë–∞–ª–∞–Ω—Å –≤–µ—Ä—Ö–æ–≤/–Ω–∏–∑–æ–≤ —Å–æ–±–ª—é–¥—ë–Ω",
        "–†–∞–∑–≤–µ—Å–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≤–µ—Ä—Ö–æ–≤, —Å–æ–±–ª—é–¥–µ–Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç–Ω–æ—Å—Ç—å",
    ]},
    {"code": "posm","title":"3) POSM –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è","items":[
        "–•–µ–¥–µ—Ä—ã/–ª–æ–≥–æ—Ç–∏–ø—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
        "–ì—Ä–∞—Ñ–∏–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–π –∫–∞–º–ø–∞–Ω–∏–∏",
        "–£—Å—Ç–∞—Ä–µ–≤—à–∏–π POSM —É–¥–∞–ª—ë–Ω, –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ ‚Äî –≤ –∑–∞—è–≤–∫–µ",
    ]},
    {"code": "styling","title":"4) –°—Ç–∞–π–ª–∏–Ω–≥ –∏ –∫—Ä–æ—Å—Å-–º–µ—Ä—á","items":[
        "–ö–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π —Ñ—Ä–æ–Ω—Ç –ø–æ–¥–¥–µ—Ä–∂–∞–Ω –æ–±—Ä–∞–∑–æ–º/—Å–ª–æ—è–º–∏",
        "–Ø—Ä–ª—ã–∫–∏ —Å–ø—Ä—è—Ç–∞–Ω—ã, –∫—Ä—é—á–∫–∏ –ø–æ –ø—Ä–∞–≤–∏–ª—É –ø—Ä–∞–≤–æ–π —Ä—É–∫–∏",
        "–ó–æ–Ω—ã —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤—ã—Å–æ—Ç–µ/—Ü–≤–µ—Ç—É/–ø–ª–æ—Ç–Ω–æ—Å—Ç–∏",
    ]},
    {"code":"mannequins","title":"5) –ú–∞–Ω–µ–∫–µ–Ω—ã","items":[
        "–õ—É–∫–∏ –ø–æ —Å–µ–∑–æ–Ω—É/–ø–æ–≥–æ–¥–µ —Ä–µ–≥–∏–æ–Ω–∞",
        "–¢–æ–≤–∞—Ä—ã —Å –º–∞–Ω–µ–∫–µ–Ω–æ–≤ –µ—Å—Ç—å –≤ –∑–∞–ª–µ (—Ä–∞–∑–º–µ—Ä–Ω–∞—è –ª–∏–Ω–µ–π–∫–∞)",
        "–ï—Å—Ç—å –±–µ—Å—Ç—Å–µ–ª–ª–µ—Ä—ã, –æ–±—Ä–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω (–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã/—Ü–≤–µ—Ç)",
    ]},
    {"code":"window","title":"6) –í–∏—Ç—Ä–∏–Ω–∞","items":[
        "–ö–æ–Ω—Ü–µ–ø—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏",
        "–ß–∏—Å—Ç–∞—è –≤–∏—Ç—Ä–∏–Ω–∞: —Å—Ç–µ–∫–ª–æ/–¥–µ–∫–æ—Ä –±–µ–∑ –ø—ã–ª–∏/—Å–ª–µ–¥–æ–≤",
        "–°–≤–µ—Ç –±–µ–∑ –ø–µ—Ä–µ—Å–≤–µ—Ç–æ–≤/–±–ª–∏–∫–æ–≤, –∞–∫—Ü–µ–Ω—Ç –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ",
    ]},
]

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# RAM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ
USER_STATE = {}

# Flask + PTB
app = Flask(__name__)
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is empty")

application = Application.builder().token(BOT_TOKEN).build()

# ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def start_payload(uid: int):
    USER_STATE[uid] = {
        "store": None, "current_block": 0, "current_item": 0,
        "answers": {}, "photos": [],
    }

def get_block_and_item(uid: int):
    st = USER_STATE[uid]
    block = CHECKLIST_BLOCKS[st["current_block"]]
    item = block["items"][st["current_item"]]
    return block, item

def kb_yes_no():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –í—Å—ë –æ–∫", callback_data="ans_ok"),
         InlineKeyboardButton("‚ö†Ô∏è –ó–∞–º–µ—á–∞–Ω–∏–µ", callback_data="ans_warn")],
        [InlineKeyboardButton("üì∏ –ü—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="add_photo")],
    ])

def kb_next():
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next")]])

def format_summary(uid: int):
    st = USER_STATE[uid]
    lines = ["üìã –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç"]
    if st.get("store"): lines.append(f"üè¨ –ú–∞–≥–∞–∑–∏–Ω: {st['store']}")
    lines.append("")
    total = ok = 0
    for block in CHECKLIST_BLOCKS:
        code = block["code"]
        ans = st["answers"].get(code, [])
        if not ans: continue
        lines.append(f"*{block['title']}*")
        for a in ans:
            icon = "‚úÖ" if a["status"] == "ok" else "‚ö†Ô∏è"
            comment = f" ‚Äî {a['comment']}" if a.get("comment") else ""
            lines.append(f"{icon} {a['item']}{comment}")
            total += 1
            if a["status"] == "ok": ok += 1
        lines.append("")
    score = int((ok/total)*100) if total else 0
    lines.append(f"üî¢ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {score}% ({ok}/{total})")
    return "\n".join(lines), score

# ‚îÄ‚îÄ handlers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def cmd_start(update: Update, context: CallbackContext):
    print(">>> /start received from", update.effective_user.id)
    user_id = update.effective_user.id
    start_payload(user_id)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø—Ä–æ–π–¥—ë–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç.\n\n"
        "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ –º–∞–≥–∞–∑–∏–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¢–¶ –ú–ï–ì–ê –ö–∞–∑–∞–Ω—å, –∏–ª–∏ #23):"
    )

async def receive_store(update: Update, context: CallbackContext):
    uid = update.effective_user.id
    if uid not in USER_STATE: start_payload(uid)
    USER_STATE[uid]["store"] = update.message.text.strip()
    block, item = get_block_and_item(uid)
    await update.message.reply_text(
        f"*{block['title']}*\n\n–ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç:\n‚Ä¢ {item}",
        reply_markup=kb_yes_no(), parse_mode="Markdown"
    )

async def handle_callback(update: Update, context: CallbackContext):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    if uid not in USER_STATE: start_payload(uid)
    st = USER_STATE[uid]
    block, item = get_block_and_item(uid)

    if q.data in ("ans_ok","ans_warn"):
        status = "ok" if q.data=="ans_ok" else "warn"
        st["answers"].setdefault(block["code"], []).append(
            {"item": item, "status": status, "comment": None}
        )
        await q.edit_message_text(
            f"{block['title']}\n\n"
            f"{'‚úÖ –í—Å—ë –æ–∫' if status=='ok' else '‚ö†Ô∏è –ó–∞–º–µ—á–∞–Ω–∏–µ'} ‚Äî {item}\n\n"
            "–ï—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π? –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–î–∞–ª–µ–µ¬ª.",
            reply_markup=kb_next()
        ); return

    if q.data == "add_photo":
        await q.edit_message_text(
            f"{block['title']}\n\n–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ—Å–ª–µ ‚Äî –Ω–∞–∂–º–∏ ¬´–î–∞–ª–µ–µ¬ª.",
            reply_markup=kb_next()
        ); return

    if q.data == "next":
        if st["current_item"]+1 < len(block["items"]):
            st["current_item"] += 1
        else:
            st["current_item"] = 0
            st["current_block"] += 1

        if st["current_block"] >= len(CHECKLIST_BLOCKS):
            summary, _ = format_summary(uid)
            await q.edit_message_text(summary, parse_mode="Markdown")

            if st["photos"]:
                media = [InputMediaPhoto(pid) for pid in st["photos"][:10]]
                try: await context.bot.send_media_group(chat_id=uid, media=media)
                except Exception: pass

            if ADMIN_ID:
                try:
                    await context.bot.send_message(chat_id=ADMIN_ID, text=summary, parse_mode="Markdown")
                    if st["photos"]:
                        media = [InputMediaPhoto(pid) for pid in st["photos"][:10]]
                        await context.bot.send_media_group(chat_id=ADMIN_ID, media=media)
                except Exception: pass

            start_payload(uid); return

        block, item = get_block_and_item(uid)
        await q.edit_message_text(
            f"*{block['title']}*\n\n–°–ª–µ–¥—É—é—â–∏–π –ø—É–Ω–∫—Ç:\n‚Ä¢ {item}",
            reply_markup=kb_yes_no(), parse_mode="Markdown"
        )

async def save_comment(update: Update, context: CallbackContext):
    uid = update.effective_user.id
    if uid not in USER_STATE: return
    st = USER_STATE[uid]
    code = CHECKLIST_BLOCKS[st["current_block"]]["code"]
    if st["answers"].get(code):
        st["answers"][code][-1]["comment"] = update.message.text.strip()
        await update.message.reply_text("üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ù–∞–∂–º–∏ ¬´–î–∞–ª–µ–µ¬ª.",
                                        reply_markup=ReplyKeyboardRemove())

async def save_photo(update: Update, context: CallbackContext):
    uid = update.effective_user.id
    if not update.message.photo: return
    file_id = update.message.photo[-1].file_id
    USER_STATE.setdefault(uid, {}).setdefault("photos", []).append(file_id)
    await update.message.reply_text("üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ù–∞–∂–º–∏ ¬´–î–∞–ª–µ–µ¬ª.")

application.add_handler(CommandHandler("start", cmd_start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receive_store), 0)
application.add_handler(CallbackQueryHandler(handle_callback))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_comment), 1)
application.add_handler(MessageHandler(filters.PHOTO, save_photo))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# PTB –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º event loop + –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç
_loop: Optional[asyncio.AbstractEventLoop] = None
_ready = threading.Event()

def _run_ptb_background():
    global _loop
    try:
        print(">>> PTB thread: creating loop")
        _loop = asyncio.new_event_loop()
        asyncio.set_event_loop(_loop)

        async def _boot():
            print(">>> PTB thread: initialize()‚Ä¶")
            await application.initialize()
            print(">>> PTB thread: start()‚Ä¶")
            await application.start()
            print(">>> PTB started")

        _loop.run_until_complete(_boot())
        _ready.set()
        _loop.run_forever()
    except Exception as e:
        import traceback
        print(">>> PTB thread crashed:", e)
        traceback.print_exc()
        _ready.set()  # —á—Ç–æ–±—ã /_loop —á—Ç–æ-—Ç–æ –ø–æ–∫–∞–∑–∞–ª

def _ensure_thread_started():
    if not _ready.is_set():
        print(">>> PTB thread: starting‚Ä¶")
        t = threading.Thread(target=_run_ptb_background, daemon=True)
        t.start()

# –°—Ç–∞—Ä—Ç—É–µ–º —Ñ–æ–Ω–æ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ (–≤ –≤–æ—Ä–∫–µ—Ä–µ gunicorn)
_ensure_thread_started()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Flask routes
@app.post("/")
def webhook():
    """–í–µ–±—Ö—É–∫ Telegram: –ª–æ–≥–∏—Ä—É–µ–º, —à–ª—ë–º –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –∏ –æ—Ç–¥–∞—ë–º –∞–ø–¥–µ–π—Ç –≤ PTB."""
    if not _ready.wait(timeout=3):
        # –ª—É–ø –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤ ‚Äî –æ—Ç–¥–∞—ë–º 503, —á—Ç–æ–±—ã Telegram –ø–æ–≤—Ç–æ—Ä–∏–ª –∞–ø–¥–µ–π—Ç
        print(">>> webhook: loop not ready, returning 503 to retry")
        return "loop not ready", 503

    data = request.get_json(silent=True) or {}
    try:
        update = Update.de_json(data, application.bot)
    except Exception as e:
        print(">>> webhook: bad update json:", e, data)
        return "bad update", 200

    print(">>> incoming update:",
          (update.to_dict().get("message") or
           update.to_dict().get("callback_query") or
           list(update.to_dict().keys())))

    # –í—Ä–µ–º–µ–Ω–Ω—ã–π "–ø—É–ª—å—Å": —Å—Ä–∞–∑—É –æ—Ç–≤–µ—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç
    try:
        if update.message and update.message.chat and update.message.text:
            asyncio.run_coroutine_threadsafe(
                application.bot.send_message(
                    chat_id=update.message.chat.id,
                    text="‚úÖ Webhook OK (—è —Ç–µ–±—è —Å–ª—ã—à—É). –°–µ–π—á–∞—Å –ø–æ–¥–∫–ª—é—á–∞—é —Å—Ü–µ–Ω–∞—Ä–∏–π‚Ä¶"
                ),
                _loop
            )
    except Exception as e:
        print(">>> direct reply error:", e)

    # –û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å: –æ—Ç–¥–∞—ë–º –∞–ø–¥–µ–π—Ç –≤ PTB
    try:
        asyncio.run_coroutine_threadsafe(application.process_update(update), _loop)
    except Exception as e:
        print(">>> process_update error:", e)

    return "ok", 200

@app.get("/set-webhook")
def set_webhook():
    if not _ready.wait(timeout=3):
        return "loop not ready", 503

    async def _set():
        await application.bot.set_webhook(
            f"{BASE_URL}/",
            allowed_updates=["message", "callback_query"]
        )
    fut = asyncio.run_coroutine_threadsafe(_set(), _loop)
    fut.result(timeout=15)
    return f"Webhook set to {BASE_URL}/", 200

@app.get("/whoami")
def whoami():
    if not _ready.wait(timeout=3):
        return "loop not ready", 503
    async def _get():
        me = await application.bot.get_me()
        return f"Bot: @{me.username} (id: {me.id})"
    fut = asyncio.run_coroutine_threadsafe(_get(), _loop)
    return fut.result(timeout=15), 200

@app.get("/_loop")
def loop_state():
    alive = bool(_loop)
    running = _loop.is_running() if _loop else False
    return f"loop_alive={alive}, is_running={running}", 200

@app.get("/health")
def health():
    return "ok", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
